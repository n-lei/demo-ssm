<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <display-name>ssmMaven</display-name>

  <!--字符编码集 过滤器 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- rest 过滤器-->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--
      1.springMVC controller方法，封装请求体中数据时，实质上还是 request.getParameter()
          而request.getParameter()是从tomacat封装好的map中去获取数据
      2.tomcat默认只会将POST请求方式的请求体封装成map
          因此对于PUT请求的请求体，tomcat不会将其封装成map，
          request.getParameter() 获取不到请求体中的数据，数据封装自然就失败了
      3. 此过滤器的功能：
          实现了将PUT或PATCH请求方式携带的请求体内容封装到自定义map中，重写了request.getParameter()方法
          先调用父类的getParameter()方法，若能找到则返回数据，若未找到，则再去自定义的map中寻找，
          最终返回结果，因此不会出现PUT请求体内容不被封装的问题
    -->
  <filter>
    <filter-name>httpPutFormContentFilter</filter-name>
    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>httpPutFormContentFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--实例化SpringIOC容器的监听器 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--springmvc前端控制器 -->
  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/springmvc.xml</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>DispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <jsp-config>
    <!-- 自定义标记库 -->
    <taglib>
      <taglib-uri>/WEB-INF/func.tld</taglib-uri>
      <taglib-location>/WEB-INF/tld/func.tld</taglib-location>
    </taglib>
  </jsp-config>

  <!-- 欢迎页面-->
  <!--<welcome-file-list>-->
    <!--<welcome-file>/WEB-INF/index.jsp</welcome-file>-->
  <!--</welcome-file-list>-->

  <!--设置session失效时间为30分钟 -->
  <session-config>
    <session-timeout>600</session-timeout>
  </session-config>
</web-app>